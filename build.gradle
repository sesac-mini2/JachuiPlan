plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.trace'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// devtools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.security:spring-security-test'

	// spring data jdbc, oracle, log4jdbc
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.oracle.database.jdbc:ojdbc11'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4:1.16'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

	// spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// mark down
	implementation 'org.commonmark:commonmark:0.21.0'

	// mybatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
}

 tasks.named('test') {
 	useJUnitPlatform()
 }
tasks.withType(JavaCompile) {
	options.compilerArgs << '-parameters'
}

def reactDir = "$projectDir/src/main/map"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildResourceFiles", "copyReactBuildHtmlFiles" }

task installReact(type: Exec) {
	workingDir "$reactDir"
	inputs.dir "$reactDir"
	group = BasePlugin.BUILD_GROUP

    // PATH 정보를 명시적으로 전달
	// Github Action Runner에서 npm 명령어 실행할 때 PATH를 전달해줘야 작동함.
    environment "PATH", System.getenv("PATH")

	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'npm.cmd', 'install', '--legacy-peer-deps'
	} else {
		commandLine 'npm', 'install', '--legacy-peer-deps'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$reactDir"
	inputs.dir "$reactDir"
	group = BasePlugin.BUILD_GROUP

    // PATH 정보를 명시적으로 전달
    environment "PATH", System.getenv("PATH")

	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'npm.cmd', 'run', 'build'
	} else {
		commandLine 'npm', 'run', 'build-linux'
	}
}

task copyReactBuildResourceFiles(type: Copy) {
	dependsOn "buildReact"
	from "$reactDir/build/"
	exclude '**/*.html' // *.html 파일 제외
	into "$projectDir/src/main/resources/static/map/"
}

task copyReactBuildHtmlFiles(type: Copy) {
	dependsOn "buildReact"
	from("$reactDir/build/") {
		include '*.html' // *.html 파일만 포함
	}
	into "$projectDir/src/main/resources/templates/map/"
}
